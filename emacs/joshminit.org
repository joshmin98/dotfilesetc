#+STARTIP: overview
* Interface Tweaks
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq warning-minimum-level :emergency)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)

  (global-set-key (kbd "<backtab>") 'forward-char)

  (setq scroll-step 1)
  (setq scroll-conservatively 10000)
  (setq auto-window-vscroll nil)
#+END_SRC
* General Interface Extensions
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))

  (use-package counsel
    :ensure t)

  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy))

  (use-package swiper
    :ensure t
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))

  (use-package zenburn-theme
    :ensure t
    :config
    (defvar zenburn-default-colors-alist))
  (load-theme 'zenburn t)

  (use-package tablist
    :ensure t)

  (use-package doom-modeline
    :ensure t
    :defer t
    :hook (after-init . doom-modeline-init))

  (use-package magit
    :ensure t)

  (use-package nlinum
    :ensure t)
  (setq nlinum-format "%d â”‚")
  (setq nlinum-highlight-current-line t)
  (global-nlinum-mode t)

  (use-package nlinum-hl
    :ensure t)
  (add-hook 'post-gc-hook #'nlinum-hl-flush-all-windows)

  (use-package smartparens
    :ensure t
    :config
    (smartparens-global-mode 1))

  (use-package google-this
    :ensure t)
  (global-set-key (kbd "C-x g") 'google-this-mode-submap)

  (use-package rainbow-delimiters
    :ensure t)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

  (use-package neotree
    :ensure t)
  (global-set-key [f8] 'neotree-toggle)
  (add-hook 'neotree-mode-hook (lambda () (nlinum-mode 0)))

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))
  (add-hook 'dashboard-mode-hook (lambda () (nlinum-mode 0)))
  (setq dashboard-items '(
			  (recents . 5)
			  (projects . 5)
			  ))

  (use-package highlight-parentheses
    :ensure t)
  (define-globalized-minor-mode global-highlight-parentheses-mode
    highlight-parentheses-mode
    (lambda ()
      (highlight-parentheses-mode t)))
  (global-highlight-parentheses-mode t)

  (use-package pretty-mode
    :ensure t
    :config
    (global-pretty-mode t))

  (use-package indent-guide
    :ensure t)
  (indent-guide-global-mode)

  (use-package dimmer
    :ensure t)
  (dimmer-mode)
#+END_SRC
* C++ Stuff
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
  (global-semanticdb-minor-mode 1)
  (global-semantic-idle-scheduler-mode 1)
  (semantic-mode 1)

  (use-package google-c-style
    :ensure t)
  (add-hook 'c-mode-common-hook 'google-set-c-style)
  (add-hook 'c-mode-common-hook 'google-make-newline-indent)

  (use-package iedit
    :ensure t)
  (define-key global-map (kbd "C-c ;") 'iedit-mode)

  (use-package yasnippet
    :ensure t
    :config
    (validate-setq
     yas-verbosity 1
     yas-wrap-around-region t)

    (with-eval-after-load 'yasnippet
      (validate-setq yas-snippet-dirs '(yasnippet-snippets-dir)))

    (yas-reload-all)
    (yas-global-mode))

  (use-package yasnippet-snippets
    :ensure t)

  (use-package rtags
    :ensure t)
  (setq rtags-autostart-diagnostics t)
  (rtags-enable-standard-keybindings)

  (use-package ivy-rtags
    :ensure t)
  (setq rtags-display-result-backend 'ivy)

  (global-set-key (kbd "C-c M-d") 'ggtags-find-definition)

  (use-package glsl-mode
    :ensure t)
  (add-to-list 'auto-mode-alist '("\\.vert\\'" . glsl-mode))
  (add-to-list 'auto-mode-alist '("\\.frag\\'" . glsl-mode))
  (add-to-list 'auto-mode-alist '("\\.vs\\'" . glsl-mode))
  (add-to-list 'auto-mode-alist '("\\.fs\\'" . glsl-mode))

  (use-package cmake-mode
    :ensure t)

  (use-package flymake
    :ensure t)

  (use-package flycheck
    :ensure t)
#+END_SRC

Auto-completion
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (progn
      (add-hook 'after-init-hook 'global-company-mode)
      (setq company-backends (delete 'company-semantic company-backends))
      (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
      ))

  (eval-after-load 'company
    '(progn
       (define-key company-active-map (kbd "TAB") 'company-select-next)
       (define-key company-active-map [tab] 'company-select-next)))


  (use-package irony
    :ensure t
    :config
    (progn
      (add-hook 'c++-mode-hook 'irony-mode)
      (add-hook 'c-mode-hook 'irony-mode)
      ))
  (defun my-irony-mode-hook ()
    (define-key irony-mode-map [remap completion-at-point]
      'irony-completion-at-point-async)
    (define-key irony-mode-map [remap complete-symbol]
      'irony-completion-at-point-aasync))
  (add-hook 'irony-mode-hook 'my-irony-mode-hook)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

  (use-package company-irony
    :ensure t)
  (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)

  (use-package company-irony-c-headers
    :ensure t)
  (eval-after-load 'company
    '(add-to-list
      'company-backends '(company-irony-c-headers company-irony company-clang)))

  (use-package company-glsl
    :ensure t
    :config
    (when (executable-find "glslangValidator")
      (add-to-list 'company-backends 'company-glsl)))

  (setq-default company-idle-delay 0)
  (setq-default company-minimum-prefix-length 1)
  (setq-default company-tooltip-align-annotations t)
  (global-company-mode 1)

#+END_SRC

Syntax Checking
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t)
  (add-hook 'c-mode-hook 'flycheck-mode)
  (add-hook 'c++-mode-hook 'flycheck-mode)

  ;; (use-package flycheck-rtags
  ;;   :ensure t)
  ;; (defun my-flycheck-rtags-setup ()
  ;;   (flycheck-select-checker 'rtags))
  ;; (add-hook 'c-mode-common-hook #'my-flycheck-rtags-setup)

  (use-package clang-format
    :ensure t)
  (global-set-key (kbd "C-c i") 'clang-format-buffer)
  (setq clang-format-style-option "Mozilla")
#+END_SRC

CMake IDE
#+BEGIN_SRC emacs-lisp
  (use-package cmake-ide
    :ensure t)
  (cmake-ide-setup)
  (global-set-key (kbd "C-c b") 'cmake-ide-compile)
#+END_SRC
* Org Mode Stuff
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
    :ensure t
    :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  (use-package ox-twbs
    :ensure t
    :config
    (defun my-org-publish-buffer ()
    (interactive)
    (save-buffer)
    (save-excursion (org-publish-current-file))
    (let* ((proj (org-publish-get-project-from-filename buffer-file-name))
           (proj-plist (cdr proj))
           (rel (file-relative-name buffer-file-name
                                    (plist-get proj-plist :base-directory)))
           (dest (plist-get proj-plist :publishing-directory)))
      (browse-url (concat "file://"
                          (file-name-as-directory (expand-file-name dest))
                          (file-name-sans-extension rel)
                          ".html")))))

#+END_SRC
* Web Stuff
JAVASCRIPT
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :config
    (use-package tern
      :diminish tern-mode
      :config    
      (add-hook 'js2-mode-hook 'tern-mode)
      (use-package company-tern
	:config
	(add-to-list 'company-backends 'company-tern))))

  (setq js-indent-level 2)

  (setq flycheck-eslintrc "~/.eslintrc")

  (setq js2-strict-missing-semi-warning nil)

  (use-package rjsx-mode
    :mode ("\\.js\\'" . rjsx-mode)
    :ensure t)
  (add-to-list 'auto-mode-alist '("components\\/.*\\.js\\'" . rjsx-mode))
  (add-to-list 'auto-mode-alist '("pages\\/.*\\.js\\'" . rjsx-mode))

  (use-package web-mode
    :ensure t)

  (use-package emmet-mode
    :ensure t)
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook  'emmet-mode)
  (add-hook 'web-mode-hook 'emmet-mode)


  (use-package indium
    :ensure t)

  (use-package json-mode
    :ensure t)
  (add-hook 'json-mode-hook
	    (lambda ()
	      (make-local-variable 'js-indent-level)
	      (setq js-indent-level 2)))

  (use-package prettier-js
    :ensure t)
  (setq prettier-js-args '(
			   "--trailing-comma" "all"
			   "--print-width" "80"
			   "--single-quote" "true"
			   "--tab-width" "2"
			   ))

  (add-hook 'js2-mode-hook 'prettier-js-mode)
  (add-hook 'web-mode-hook 'prettier-js-mode)

  (use-package tide
    :ensure t
    :after (typescript-mode company flycheck)
    :hook ((typescript-mode . tide-setup)
	   (typescript-mode . tide-hl-identifier-mode)
	   (before-save . tide-format-before-save)))

  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    ;; company is an optional dependency. You have to
    ;; install it separately via package-install
    ;; `M-x package-install [ret] company`
    (company-mode +1))

  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)

  ;; formats the buffer before saving
  (setq typescript-indent-level 2)
  (add-hook 'before-save-hook 'tide-format-before-save)

  (add-hook 'typescript-mode-hook #'setup-tide-mode)

  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
  (add-hook 'web-mode-hook
	    (lambda ()
	      (when (string-equal "tsx" (file-name-extension buffer-file-name))
		(setup-tide-mode))))
  (defun my-web-mode-hook ()
    "Hooks for Web mode."
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (electric-indent-mode -1)
    )
  (add-hook 'web-mode-hook  'my-web-mode-hook)
  ;; enable typescript-tslint checker
  (flycheck-add-mode 'typescript-tslint 'web-mode)
#+END_SRC
* Evil Mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
  (evil-mode 1))

  (use-package evil-tutor
    :ensure t)

  (use-package evil-easymotion
    :ensure t)
  (evilem-default-keybindings "SPC")
#+END_SRC
* Python
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t)
  (setq elpy-rpc-python-command "/home/joshmin/anaconda3/bin/python")
  (setq python-shell-interpreter "/home/joshmin/anaconda3/bin/python")
  (elpy-enable)

  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode)

  (use-package jedi-core
    :ensure t)

  (use-package company-jedi
    :ensure t)
  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))
  (add-hook 'python-mode-hook 'my/python-mode-hook)

  (use-package py-autopep8
    :ensure t)
  (setq py-autopep8-options '("--max-line-length=80"))
  (add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
#+END_SRC
* Nim
#+BEGIN_SRC emacs-lisp
  (use-package nim-mode
    :ensure t)
  (setq nimsuggest-path "~/Documents/nim-0.18.0/bin/nimsuggest")
  (add-hook 'nimsuggest-mode-hook 'company-mode)
#+END_SRC
* Java
#+BEGIN_SRC emacs-lisp
  (use-package lsp-java
    :ensure t)
  (setq lsp-java-server-install-dir "~/Documents/jdt-ls/org.eclipse.jdt.ls.product/target/repository")
  (add-hook 'java-mode-hook #'lsp)
#+END_SRC
* Rust
  #+BEGIN_SRC emacs-lisp
    (use-package cargo
      :ensure t)
    (add-hook 'rust-mode-hook 'cargo-minor-mode)

    (use-package rust-mode
      :mode "\\.rs\\'"
      :init
      (setq rust-format-on-save t))
    (use-package lsp-mode
      :init
      (add-hook 'prog-mode-hook 'lsp-mode)
      :config
      (use-package lsp-flycheck
	:ensure f ; comes with lsp-mode
	:after flycheck))
  #+END_SRC
  
* Clojure
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t)
  (use-package paredit
    :ensure t)
  (add-hook 'clojure-mode-hook
     '(lambda ()
	(paredit-mode 1)))
  (add-hook 'cider-repl-mode-hook #'company-mode)
  (add-hook 'cider-mode-hook #'company-mode)
  (add-hook 'cider-repl-mode-hook #'cider-company-enable-fuzzy-completion)
  (add-hook 'cider-mode-hook #'cider-company-enable-fuzzy-completion)
#+END_SRC
* Set env vars
#+BEGIN_SRC emacs-lisp
  (let ((path (shell-command-to-string ". ~/.zshrc; echo -n $PATH")))
    (setenv "PATH" path)
    (setq exec-path 
	  (append
	   (split-string-and-unquote path ":")
	   exec-path)))
  (setenv "JAVA_HOME" "/usr/lib/jvm/openjdk-1.8.0_202")
#+END_SRC
* etc
  #+BEGIN_SRC emacs-lisp
    (setq markdown-command "/usr/bin/pandoc")

    (defun rust-pretty-symbols ()
      (setq prettify-symbols-alist
	    '(
	      ("fn" . 955)
	      ("->" . 8594)
	      ("=>" . 8658)
	      )))

    (add-hook 'rust-mode-hook 'rust-pretty-symbols)
    (global-prettify-symbols-mode 1)

    (set-face-attribute 'default nil
			:font "Source Sans Pro"
			:weight 'normal
			:width 'normal
			:height 140)

    (use-package projectile
      :ensure t
      :config
      (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      (projectile-mode +1))
    (setq projectile-project-search-path '("~/Development/"
					   "~/Development/CSCI353/"
					   "~/Development/CSCI356/"
					   ))
    (use-package counsel-projectile
      :ensure t)
    (counsel-projectile-mode t)

    (use-package evil-magit
      :ensure t)
  #+END_SRC
  
  

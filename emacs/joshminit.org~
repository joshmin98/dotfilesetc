#+STARTIP: overview
* Interface Tweaks
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)

  (global-set-key (kbd "<backtab>") 'forward-char)

#+END_SRC
* General Interface Extensions
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))

  (use-package counsel
    :ensure t)

  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy))

  (use-package swiper
    :ensure t
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))

  (use-package zenburn-theme
    :ensure t
    :config
    (defvar zenburn-default-colors-alist))
  (load-theme 'zenburn t)

  (use-package tablist
    :ensure t)

  (use-package powerline
    :ensure t
    :config
    (powerline-center-evil-theme))

  (use-package magit
    :ensure t)

  (use-package nlinum
    :ensure t)
  (setq nlinum-format "%3d\u2595  ")
  (setq nlinum-highlight-current-line t)
  (global-nlinum-mode t)

  (use-package nlinum-hl
    :ensure t)
  (require 'nlinum-hl)
  (add-hook 'post-gc-hook #'nlinum-hl-flush-all-windows)

  (use-package smartparens
    :ensure t
    :config
    (smartparens-global-mode 1))

  (use-package google-this
    :ensure t)
  (global-set-key (kbd "C-x g") 'google-this-mode-submap)

  (use-package rainbow-delimiters
    :ensure t)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

  (use-package neotree
    :ensure t)
  (global-set-key [f8] 'neotree-toggle)

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))
#+END_SRC
* C++ Stuff
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
  (require 'cc-mode)
  (require 'semantic)
  (global-semanticdb-minor-mode 1)
  (global-semantic-idle-scheduler-mode 1)
  (semantic-mode 1)

  (use-package google-c-style
    :ensure t)
  (add-hook 'c-mode-common-hook 'google-set-c-style)
  (add-hook 'c-mode-common-hook 'google-make-newline-indent)

  (use-package iedit
    :ensure t)
  (define-key global-map (kbd "C-c ;") 'iedit-mode)

  (use-package yasnippet
    :ensure t)
  (require 'yasnippet)
  (yas-global-mode 1)

  (use-package yasnippet-snippets
    :ensure t)

  (use-package rtags
    :ensure t)
  (setq rtags-autostart-diagnostics t)
  (rtags-enable-standard-keybindings)

  (use-package ivy-rtags
    :ensure t)
  (setq rtags-display-result-backend 'ivy)

  (global-set-key (kbd "C-c M-d") 'ggtags-find-definition)

  (use-package glsl-mode
    :ensure t)
  (add-to-list 'auto-mode-alist '("\\.vert\\'" . glsl-mode))
  (add-to-list 'auto-mode-alist '("\\.frag\\'" . glsl-mode))
  (add-to-list 'auto-mode-alist '("\\.vs\\'" . glsl-mode))
  (add-to-list 'auto-mode-alist '("\\.fs\\'" . glsl-mode))

  (use-package cmake-mode
    :ensure t)
#+END_SRC

Auto-completion
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (progn
      (add-hook 'after-init-hook 'global-company-mode)
      (setq company-backends (delete 'company-semantic company-backends))
      (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
      ))

  (use-package irony
    :ensure t
    :config
    (progn
      (add-hook 'c++-mode-hook 'irony-mode)
      (add-hook 'c-mode-hook 'irony-mode)
      ))
  (defun my-irony-mode-hook ()
    (define-key irony-mode-map [remap completion-at-point]
      'irony-completion-at-point-async)
    (define-key irony-mode-map [remap complete-symbol]
      'irony-completion-at-point-aasync))
  (add-hook 'irony-mode-hook 'my-irony-mode-hook)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

  (use-package company-irony
    :ensure t)
  (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)

  (use-package company-irony-c-headers
    :ensure t)
  (eval-after-load 'company
    '(add-to-list
      'company-backends '(company-irony-c-headers company-irony company-clang)))

  (use-package company-glsl
    :ensure t
    :config
    (when (executable-find "glslangValidator")
      (add-to-list 'company-backends 'company-glsl)))

  (setq-default company-idle-delay 0)
  (setq-default company-minimum-prefix-length 1)
  (setq-default company-tooltip-align-annotations t)
  (global-company-mode 1)

#+END_SRC

Syntax Checking
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t)
  (add-hook 'c-mode-hook 'flycheck-mode)
  (add-hook 'c++-mode-hook 'flycheck-mode)

  (use-package flycheck-rtags
    :ensure t)
  (defun my-flycheck-rtags-setup ()
    (flycheck-select-checker 'rtags))
  (add-hook 'c-mode-common-hook #'my-flycheck-rtags-setup)

  (use-package clang-format
    :ensure t)
  (global-set-key (kbd "C-c i") 'clang-format-buffer)
  (setq clang-format-style-option "Mozilla")
#+END_SRC

CMake IDE
#+BEGIN_SRC emacs-lisp
  (use-package cmake-ide
    :ensure t)
  (cmake-ide-setup)
  (global-set-key (kbd "C-c b") 'cmake-ide-compile)
#+END_SRC
* Org Mode Stuff
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  (use-package ox-twbs
    :ensure t
    :config
    (defun my-org-publish-buffer ()
    (interactive)
    (save-buffer)
    (save-excursion (org-publish-current-file))
    (let* ((proj (org-publish-get-project-from-filename buffer-file-name))
           (proj-plist (cdr proj))
           (rel (file-relative-name buffer-file-name
                                    (plist-get proj-plist :base-directory)))
           (dest (plist-get proj-plist :publishing-directory)))
      (browse-url (concat "file://"
                          (file-name-as-directory (expand-file-name dest))
                          (file-name-sans-extension rel)
                          ".html")))))

#+END_SRC
* Web Stuff
HTML and CSS
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t)
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook  'emmet-mode)
#+END_SRC

JAVASCRIPT
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :mode ("\\.js\\'" . js2-mode)
    :config
    (use-package tern
      :diminish tern-mode
      :config    
      (add-hook 'js2-mode-hook 'tern-mode)
      (use-package company-tern
        :config
        (add-to-list 'company-backends 'company-tern))))

  (use-package indium
    :ensure t)

  (use-package json-mode
    :ensure t)
#+END_SRC

TYPESCRIPT
#+BEGIN_SRC emacs-lisp
  (use-package tide
    :ensure t)
  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode 1)
    (setq flycheck-check-syntax-automatically '(save-mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode 1)
    (company-mode 1))
  (add-hook 'before-save-hook 'tide-format-before-save)
  (add-hook 'typescript-mode-hook #'setup-tide-mode)
#+END_SRC

COFFEESCRIPT
#+BEGIN_SRC emacs-lisp
  (use-package coffee-mode
    :ensure t)
  (setq whitespace-action '(auto-cleanup))
  (setq whitespace-style '(trailing space-before-tab indentation empty space-after-tab))
  (custom-set-variables '(coffee-tab-width 2))
#+END_SRC
* Rust Stuff
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :config
    (setq rust-format-on-save t))

  (use-package racer
    :ensure t)

  (use-package flymake-easy
    :ensure t)
  (use-package flymake-rust
    :ensure t)
#+END_SRC
* Evil Mode
Evil Mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
  (evil-mode 1))

  (use-package evil-tutor
    :ensure t)

  (use-package evil-easymotion
    :ensure t)
  (evilem-default-keybindings "SPC")
#+END_SRC
* Python
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :config
    (setq elpy-rpc-python-command "python3"))
  (elpy-enable)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode)

  (use-package jedi-core
    :ensure t)

  (use-package company-jedi
    :ensure t)
  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))
  (add-hook 'python-mode-hook 'my/python-mode-hook)

  (use-package py-autopep8
    :ensure t)
  (setq py-autopep8-options '("--max-line-length=80"))
  (add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
#+END_SRC
